{"version":3,"sources":["constants.js","scene.js","components/Input.js","App.js","serviceWorker.js","index.js"],"names":["TX","TY","TZ","numbers","require","RADIAN","Math","PI","UNIT_MATRIX","copy","array","JSON","parse","stringify","normalize","point","Scene","this","g","0","t","1","2","3","transformSteck","transformMatrix","basePoints","lines","splines","surfaces","backupPoints","sweep","apply","scale","centerRegion","x","y","value","axis","tansferMatrix","C","Error","push","scaleMatrix","a","cos","sin","shiftMatrix","focusMatix","canvas","document","getElementById","points","xMin","xMax","yMin","yMax","i","length","regionWidth","abs","regionHeight","screenWidth","width","screenHeight","height","screen","text","scene","console","log","getContext","context","setTransform","clearRect","translate","strokeStyle","line","point1","matrix","multiply","multiplyMatrix","point2","beginPath","moveTo","lineTo","closePath","stroke","splinePoints","spline","p","contolPoint","subTerm","scalar","addition","s","surface","surfacePoints","u","v","j","controlPoint","is","marginLeft","Inputs","label","name","onClick","onChange","Box","Typography","variant","display","Input","margin","style","IconButton","color","event","press","size","fontSize","App","useState","transfer","setTransfer","setScale","rotate","setRotate","shift","setShift","focus","setFocus","pressTransfer","addTransferMatrix","draw","pressScale","addScaleMatrix","pressRotate","addRotateMatrix","changeTrasfer","target","Number","changeScale","changeRotate","btn","marginRight","id","Card","className","raised","CardContent","Button","forms","elements","files","then","uploadScene","setSweep","setDefault","CardActions","type","addFocusMatrix","addShiftMatix","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0fe52750.chunk.js","sourcesContent":["export default {\n    TX: 'x',\n    TY: 'y',\n    TZ: 'z',\n};","import C from './constants';\n\nconst numbers = require('numbers');\n\nconst RADIAN = Math.PI / 180;\n\n// еденичная матрица\nconst UNIT_MATRIX = [\n    [1, 0, 0, 0],\n    [0, 1, 0, 0],\n    [0, 0, 1, 0],\n    [0, 0, 0, 1]\n];\n\n// функция копирования массива\nconst copy = array => {\n    return JSON.parse(JSON.stringify(array));\n};\n\n// функция нормализации\nconst normalize = point => {\n    return copy([point[0] / point[3], point[1] / point[3], point[2] / point[3], point[3] / point[3]]);\n};\n\nexport default class Scene {\n\n    // конструктор класса\n    constructor() {\n\n        // \"подкласс\" (объект с методами по факту) для вычисления базиса Бола\n        this.g = {\n            0: (t) => {\n                return (1 - t) * (1 - t);\n            },\n            1: (t) => {\n                return 2 * t * (1 - t) * (1 - t);\n            },\n            2: (t) => {\n                return 2 * (1 - t) * t *t;\n            },\n            3: (t) => {\n                return t * t;\n            }\n        };\n\n        // массив преобразований\n        this.transformSteck = [copy(UNIT_MATRIX)];\n\n        // конечная матрица преобразования\n        this.transformMatrix = copy(UNIT_MATRIX);\n\n        // базовые объеты сцены сцены\n        this.basePoints = [];\n        this.lines = [];\n        this.splines = [];\n        this.surfaces = [];\n\n        // backup сцены\n        this.backupPoints = [];\n\n        // настройки для вписания в экран\n        this.sweep = {\n            apply: false,\n            scale: 1,\n            centerRegion: {\n                x: 0,\n                y: 0\n            }\n        };\n\n    }\n\n    // public метод: добавление матрицы сдвига в стек преоразований\n    addTransferMatrix(value, axis) {\n\n        const tansferMatrix = copy(UNIT_MATRIX);\n\n        switch (axis) {\n            case C.TX:\n                tansferMatrix[3][0] = value;\n                break;\n            case C.TY:\n                tansferMatrix[3][1] = value;\n                break;\n            case C.TZ:\n                tansferMatrix[3][2] = value;\n                break;\n            default:\n                throw Error(`Unexpected token ${axis}`);\n        }\n        \n        this.transformSteck.push(tansferMatrix);\n    }\n\n    // public метод: добавление матрицы масштаирования в стек преоразований\n    addScaleMatrix(value, axis) {\n\n        const scaleMatrix = copy(UNIT_MATRIX);\n\n        switch (axis) {\n            case C.TX:\n                scaleMatrix[0][0] = value;\n                break;\n            case C.TY:\n                scaleMatrix[1][1] = value;\n                break;\n            case C.TZ:\n                scaleMatrix[2][2] = value;\n                break;\n            default:\n                throw Error(`Unexpected token ${axis}`);\n        }\n\n        this.transformSteck.push(scaleMatrix); \n    }\n\n    // public метод: добавление матрицы поворота в стек преобразований \n    addRotateMatrix(value, axis) {\n        const a = value * RADIAN;\n        switch (axis) {\n            case C.TX:\n                this.transformSteck.push([\n                    [1, 0, 0, 0],\n                    [0, Math.cos(a), Math.sin(a), 0],\n                    [0, -Math.sin(a), Math.cos(a), 0],\n                    [0, 0, 0, 1]\n                ]);\n                break;\n            case C.TY:\n                this.transformSteck.push([\n                    [Math.cos(a), 0, -Math.sin(a), 0],\n                    [0, 1, 0, 0],\n                    [Math.sin(a), 0, Math.cos(a), 0],\n                    [0, 0, 0, 1]\n                ]);\n                break;\n            case C.TZ:\n                this.transformSteck.push([\n                    [Math.cos(a), Math.sin(a), 0, 0],\n                    [-Math.sin(a), Math.cos(a), 0, 0],\n                    [0, 0, 1, 0],\n                    [0, 0, 0, 1]\n                ]);\n                break;\n            default:\n                throw Error(`Unexpected token ${axis}`);\n        }\n    }\n\n    // public метод: добавление матрицы косого сдвига (Х по У) в стек преобразований\n    addShiftMatix(value) {\n\n        const shiftMatrix = copy(UNIT_MATRIX);\n\n        shiftMatrix[1][0] = value;\n        \n        this.transformSteck.push(shiftMatrix);\n    }\n\n    // public метод: добавление матрицы ОПП (по Z) в стек преобразований\n    addFocusMatrix(value) {\n\n        const focusMatix = copy(UNIT_MATRIX);\n\n        focusMatix[2][3] = value === 0 ? 0 : 1 / value;\n\n        this.transformSteck.push(focusMatix);\n    }\n\n    // public метод: возврат в исходное состояние сцены\n    setDefault() {\n        this.transformSteck = [copy(UNIT_MATRIX)];\n\n        this.transformMatrix = copy(UNIT_MATRIX);\n\n        this.sweep = {\n            apply: false,\n            scale: 1,\n            centerRegion: {\n                x: 0,\n                y: 0\n            }\n        };\n    }\n\n    // public метод: вычисление настроек для вписывания в экран\n    setSweep() {\n        const canvas = document.getElementById('canvas');\n\n        var points = copy(this.backupPoints);\n        var xMin = points[0][0];\n        var xMax = points[0][0];\n        var yMin = points[0][1];\n        var yMax = points[0][1];\n\n        for(let i = 0; i < points.length; i++) {\n            if(points[i][0] > xMax) {\n                xMax = points[i][0];\n            }\n\n            if(points[i][0] < xMin) {\n                xMin = points[i][0];\n            }\n\n            if(points[i][1] > yMax) {\n                yMax = points[i][1];\n            }\n\n            if(points[i][1] < yMin) {\n                yMin = points[i][1];\n            }\n        }\n\n        var regionWidth = Math.abs(xMax - xMin);\n        var regionHeight = Math.abs(yMax - yMin);\n\n        var screenWidth = canvas.width;\n        var screenHeight = canvas.height;\n\n        var screen = 0;\n\n        if(screenWidth > screenHeight) {\n            screen = screenHeight - 100;\n        } else {\n            screen = screenWidth - 100;\n        }\n    \n        var scale = 1;\n    \n        if(regionWidth > regionHeight) {\n            scale = screen / regionWidth;\n        } else {\n            scale = screen / regionHeight;\n        }\n\n        this.sweep.apply = true;\n        this.sweep.scale = scale;\n        this.sweep.centerRegion = {\n            x: xMin + regionWidth / 2,\n            y: yMin + regionHeight / 2\n        };\n\n        this.transformSteck.push([\n            [scale, 0, 0, 0],\n            [0, scale, 0, 0],\n            [0, 0, scale, 0],\n            [0, 0, 0, 1]\n        ]);\n    }\n\n    // public метод: загрузить сцену\n    uploadScene(text) {\n        const scene = JSON.parse(text);\n\n        if(!scene.points) throw Error('scene invalide');\n\n        this.basePoints = copy(scene.points);\n        this.lines = scene.lines ? copy(scene.lines) : [];\n        this.splines = scene.splines ? copy(scene.splines) : [];\n        this.surfaces = scene.surfaces ? copy(scene.surfaces) : [];\n\n    }\n\n    // public метод: отрисовать сцену\n    draw() {\n        const canvas = document.getElementById('canvas');\n\n        console.log(this.transformSteck);\n\n        if(canvas.getContext) {\n\n            const context = canvas.getContext('2d');\n            var backupPoints = [];\n\n            if(this.sweep.apply) {\n                debugger;\n                context.setTransform(1, 0, 0, 1, 0, 0);\n                context.clearRect(0, 0, canvas.width, canvas.height);\n\n                const scale = this.sweep.scale;\n                const centerRegion = this.sweep.centerRegion;\n\n                context.translate(canvas.width / 2, canvas.height / 2);\n                context.scale(1, -1);\n                context.translate(-centerRegion.x*scale, -centerRegion.y*scale);\n\n            } else {\n                context.setTransform(1, 0, 0, 1, 0, 0);\n                context.clearRect(0, 0, canvas.width, canvas.height);\n\n                context.translate(canvas.width / 2, canvas.height / 2);\n                context.scale(1, -1);\n            }\n\n            context.strokeStyle = 'white';\n\n            for(let i = 0; i < this.lines.length; i++) {\n\n                const line = this.lines[i];\n\n                const point1 = normalize(numbers.matrix.multiply([this.basePoints[line[0]]], this.multiplyMatrix())[0]);\n                const point2 = normalize(numbers.matrix.multiply([this.basePoints[line[1]]], this.multiplyMatrix())[0]);\n\n                context.beginPath();\n                context.moveTo(point1[0], point1[1]);\n                context.lineTo(point2[0], point2[1]);\n                context.closePath();\n                context.stroke();\n\n                backupPoints.push(point1);\n                backupPoints.push(point2);\n\n            }\n\n            for(let i = 0; i < this.splines.length; i++) {\n\n                var splinePoints = [];\n\n                const spline = this.splines[i];\n\n                for(let t = 0; t < 1.025; t += 0.05) {\n\n                    let p = [0, 0, 0, 0];\n\n                    for(let i = 0; i < spline.length; i++) {\n                        const contolPoint = this.basePoints[spline[i]];\n                        const subTerm = numbers.matrix.scalar([contolPoint], this.g[i](t))[0];\n\n                        p = numbers.matrix.addition(p, subTerm);\n                    }\n\n                    const point = normalize(numbers.matrix.multiply([p], this.multiplyMatrix())[0]);\n\n                    splinePoints.push(point);\n                    backupPoints.push(point);\n                }\n\n                context.beginPath();\n                for(let i = 1; i < splinePoints.length; i++) {\n                    context.moveTo(splinePoints[i-1][0], splinePoints[i-1][1]);\n                    context.lineTo(splinePoints[i][0], splinePoints[i][1]);\n                }\n                context.closePath();\n                context.stroke();\n\n            }\n\n            for(let s = 0; s < this.surfaces.length; s++) {\n\n                var surface = this.surfaces[s];\n\n                let surfacePoints = [];\n\n                for(let u = 0; u < 1.025; u += 0.05) {\n                    let line = [];\n\n                    for(let v = 0; v < 1.025; v += 0.05) {\n                        let p = [0, 0, 0, 0];\n\n                        for(let i = 0; i < surface.length; i++) {\n                            for(let j = 0; j < surface[i].length; j++) {\n                                const controlPoint = this.basePoints[surface[i][j]];\n                                const subTerm = numbers.matrix.scalar([controlPoint], this.g[i](u)*this.g[j](v))[0];\n\n                                p = numbers.matrix.addition(p, subTerm); \n                            }\n                        }\n\n                        const point = normalize(numbers.matrix.multiply([p], this.multiplyMatrix())[0]);\n                        line.push(point);\n                        backupPoints.push(point);\n                    }\n\n                    surfacePoints.push(line);\n                }\n\n                for(let i = 0; i < surfacePoints.length; i++) {\n                    context.beginPath();\n                    for(let j = 1; j < surfacePoints[i].length; j++) {\n                        context.moveTo(surfacePoints[i][j-1][0], surfacePoints[i][j-1][1]);\n                        context.lineTo(surfacePoints[i][j][0], surfacePoints[i][j][1]);\n                    }\n                    context.closePath();\n                    context.stroke();\n                }\n\n                for(let i = 0; i < surfacePoints.length; i++) {\n                    context.beginPath();\n                    for(let j = 1; j < surfacePoints[i].length; j++) {\n                        context.moveTo(surfacePoints[j-1][i][0], surfacePoints[j-1][i][1]);\n                        context.lineTo(surfacePoints[j][i][0], surfacePoints[j][i][1]);\n                    }\n                    context.closePath();\n                    context.stroke();\n                }\n\n            }\n\n            this.backupPoints = copy(backupPoints);\n        }\n    }\n\n    // pivate метод: перемножить матрицы стека преобразований\n    multiplyMatrix() {\n        \n        let multiply = this.transformSteck[0];\n\n        for(let i = 1; i < this.transformSteck.length; i++) {\n            multiply = numbers.matrix.multiply(multiply, this.transformSteck[i]);\n        }\n\n        return multiply;\n\n    }\n\n}","import React from 'react';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport Input from '@material-ui/core/Input';\nimport IconButton from '@material-ui/core/IconButton';\nimport AddIcon from '@material-ui/icons/Add';\n\nconst is = {\n    width: '35px',\n    marginLeft: '5px'\n}\n\nexport default function Inputs({label, name, onClick, onChange}) {\n\n    const press = name => event => {\n        onClick(name);\n    };\n\n    return (\n        <Box width={120}>\n            <Typography variant=\"overline\" display='inline'>{label}</Typography>\n            <Input margin=\"dense\" name={name} onChange={onChange} style={is} />\n            <IconButton color=\"primary\" onClick={press(name)} size=\"small\">\n                <AddIcon fontSize=\"inherit\" />\n            </IconButton>\n        </Box>\n    )\n}\n","import React, {useState} from 'react';\nimport './App.css';\nimport Scene from './scene';\nimport C from './constants';\n\nimport Input from './components/Input';\n\nimport Box from '@material-ui/core/Box';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport CardActions from '@material-ui/core/CardActions';\n\nfunction App() {\n\n  const [scene, setScene] = useState(new Scene());\n  const [transfer, setTransfer] = useState({ \n    [C.TX]: 0, \n    [C.TY]: 0, \n    [C.TZ]: 0 \n  });\n  const [scale, setScale] = useState({\n    [C.TX]: 1, \n    [C.TY]: 1, \n    [C.TZ]: 1 \n  });\n  const [rotate, setRotate] = useState({\n    [C.TX]: 0, \n    [C.TY]: 0, \n    [C.TZ]: 0 \n  });\n  const [shift, setShift] = useState(0);\n  const [focus, setFocus] = useState(0);\n\n  // press draw\n  const pressDraw = event => {\n    scene.draw();\n  };\n\n  // press sweep\n  const pressSweep = event => {\n    scene.setSweep();\n  }\n\n  // press default\n  const pressDefault = event => {\n    scene.setDefault();\n  };\n\n  // press open file\n  const pressOpenFile = event => {\n    document\n      .forms['uploadForm']\n      .elements['uploadInput']\n      .files[0]\n      .text()\n      .then(text => {\n        scene.uploadScene(text);\n      });\n  };\n\n  /*Хандлеры матриц преобразования*/\n\n  // press transfer\n  const pressTransfer = name => {\n    scene.addTransferMatrix(\n      transfer[name],\n      name\n    );\n    scene.draw();\n  };\n\n  // press scale\n  const pressScale = name => {\n    scene.addScaleMatrix(\n      scale[name],\n      name\n    );\n    scene.draw();\n  };\n\n  // press rotate\n  const pressRotate = name => {\n    scene.addRotateMatrix(\n      rotate[name],\n      name\n    );\n    scene.draw();\n  };\n\n  // press shift\n  const pressShift = event => {\n    scene.addShiftMatix(shift);\n    scene.draw();\n  };\n\n  // press focus\n  const pressFocus = event => {\n    scene.addFocusMatrix(focus);\n    scene.draw();\n  }\n\n  // change transfer\n  const changeTrasfer = event => {\n    setTransfer({\n      ...transfer,\n      [event.target.name]: Number(event.target.value)\n    });\n  };\n\n\n  // change scale\n  const changeScale = event => {\n    setScale({\n      ...scale,\n      [event.target.name]: Number(event.target.value)\n    });\n  };\n\n  // change rotate\n  const changeRotate = event => {\n    setRotate({\n      ...rotate,\n      [event.target.name]: Number(event.target.value)\n    });\n  };\n\n  // change shift\n  const changeShift = event => {\n    setShift(Number(event.target.value));\n  };\n\n  // change focus\n  const changeFocus = event => {\n    setFocus(Number(event.target.value));\n  }\n\n  const btn = {\n    marginRight: '2.5px',\n    marginLeft: '2.5px'\n  }\n\n  return (\n    <main id='app'>\n      <Box id='drower'>\n        <canvas \n          id='canvas'\n          width='1305'\n          height='470'>\n        </canvas>\n      </Box>\n      <Box id='fanctions'>\n        <Card className='btn-group' raised>\n          <CardContent>\n            <Button style={btn} variant=\"contained\" color=\"primary\" onClick={pressDraw}>Отрисовать</Button>\n            <Button style={btn} variant=\"contained\" color=\"primary\" onClick={pressOpenFile}>Загрузить файл</Button>\n            <Button style={btn} variant=\"contained\" color=\"primary\" onClick={pressSweep}>Вписать в экран</Button>\n            <Button style={btn} variant=\"contained\" color=\"primary\" onClick={pressDefault}>Исходное состояние</Button>\n          </CardContent>\n          <CardActions>\n            <form name='uploadForm'>\n              <input name='uploadInput' type='file' />\n            </form>\n          </CardActions>\n        </Card>\n        <Card className='func-group' raised>\n          <CardContent>\n            <Typography>Сдвиг</Typography>\n            <Input name={C.TX} label=\"ось Х\" onChange={changeTrasfer} onClick={pressTransfer} />\n            <Input name={C.TY} label=\"ось Y\" onChange={changeTrasfer} onClick={pressTransfer} />\n            <Input name={C.TZ} label=\"ось Z\" onChange={changeTrasfer} onClick={pressTransfer} />\n          </CardContent>\n        </Card>\n        <Card className='func-group' raised>\n          <CardContent>\n            <Typography>Поворот</Typography>\n            <Input name={C.TX} label=\"ось Х\" onChange={changeRotate} onClick={pressRotate} />\n            <Input name={C.TY} label=\"ось Y\" onChange={changeRotate} onClick={pressRotate} />\n            <Input name={C.TZ} label=\"ось Z\" onChange={changeRotate} onClick={pressRotate} />\n          </CardContent>\n        </Card>\n        <Card className='func-group' raised>\n          <CardContent>\n            <Typography>Масштаб</Typography>\n            <Input name={C.TX} label=\"ось Х\" onChange={changeScale} onClick={pressScale} />\n            <Input name={C.TY} label=\"ось Y\" onChange={changeScale} onClick={pressScale} />\n            <Input name={C.TZ} label=\"ось Z\" onChange={changeScale} onClick={pressScale} />\n          </CardContent>\n        </Card>\n        <Card className='func-group' raised>\n          <CardContent>\n            <Typography>ОПП</Typography>\n            <Input name={C.TX} label=\"ось Х\" onChange={changeFocus} onClick={pressFocus} />\n          </CardContent>\n        </Card>\n        <Card className='func-group' raised>\n          <CardContent>\n            <Typography>Косой сдвиг</Typography>\n            <Input name={C.TY} label=\"ось Y\" onChange={changeShift} onClick={pressShift} />\n          </CardContent>\n        </Card>\n      </Box>\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}